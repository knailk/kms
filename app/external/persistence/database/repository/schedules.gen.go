// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"kms/app/domain/entity"
)

func newSchedule(db *gorm.DB, opts ...gen.DOOption) schedule {
	_schedule := schedule{}

	_schedule.scheduleDo.UseDB(db, opts...)
	_schedule.scheduleDo.UseModel(&entity.Schedule{})

	tableName := _schedule.scheduleDo.TableName()
	_schedule.ALL = field.NewAsterisk(tableName)
	_schedule.ID = field.NewField(tableName, "id")
	_schedule.ClassID = field.NewField(tableName, "class_id")
	_schedule.FromTime = field.NewTime(tableName, "from_time")
	_schedule.ToTime = field.NewTime(tableName, "to_time")
	_schedule.Action = field.NewString(tableName, "action")
	_schedule.Date = field.NewInt64(tableName, "date")
	_schedule.CreatedAt = field.NewTime(tableName, "created_at")
	_schedule.UpdatedAt = field.NewTime(tableName, "updated_at")

	_schedule.fillFieldMap()

	return _schedule
}

type schedule struct {
	scheduleDo

	ALL       field.Asterisk
	ID        field.Field
	ClassID   field.Field
	FromTime  field.Time
	ToTime    field.Time
	Action    field.String
	Date      field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s schedule) Table(newTableName string) *schedule {
	s.scheduleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s schedule) As(alias string) *schedule {
	s.scheduleDo.DO = *(s.scheduleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *schedule) updateTableName(table string) *schedule {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.ClassID = field.NewField(table, "class_id")
	s.FromTime = field.NewTime(table, "from_time")
	s.ToTime = field.NewTime(table, "to_time")
	s.Action = field.NewString(table, "action")
	s.Date = field.NewInt64(table, "date")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *schedule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *schedule) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["class_id"] = s.ClassID
	s.fieldMap["from_time"] = s.FromTime
	s.fieldMap["to_time"] = s.ToTime
	s.fieldMap["action"] = s.Action
	s.fieldMap["date"] = s.Date
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s schedule) clone(db *gorm.DB) schedule {
	s.scheduleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s schedule) replaceDB(db *gorm.DB) schedule {
	s.scheduleDo.ReplaceDB(db)
	return s
}

type scheduleDo struct{ gen.DO }

type IScheduleDo interface {
	gen.SubQuery
	Debug() IScheduleDo
	WithContext(ctx context.Context) IScheduleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScheduleDo
	WriteDB() IScheduleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScheduleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScheduleDo
	Not(conds ...gen.Condition) IScheduleDo
	Or(conds ...gen.Condition) IScheduleDo
	Select(conds ...field.Expr) IScheduleDo
	Where(conds ...gen.Condition) IScheduleDo
	Order(conds ...field.Expr) IScheduleDo
	Distinct(cols ...field.Expr) IScheduleDo
	Omit(cols ...field.Expr) IScheduleDo
	Join(table schema.Tabler, on ...field.Expr) IScheduleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScheduleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScheduleDo
	Group(cols ...field.Expr) IScheduleDo
	Having(conds ...gen.Condition) IScheduleDo
	Limit(limit int) IScheduleDo
	Offset(offset int) IScheduleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScheduleDo
	Unscoped() IScheduleDo
	Create(values ...*entity.Schedule) error
	CreateInBatches(values []*entity.Schedule, batchSize int) error
	Save(values ...*entity.Schedule) error
	First() (*entity.Schedule, error)
	Take() (*entity.Schedule, error)
	Last() (*entity.Schedule, error)
	Find() ([]*entity.Schedule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Schedule, err error)
	FindInBatches(result *[]*entity.Schedule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Schedule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScheduleDo
	Assign(attrs ...field.AssignExpr) IScheduleDo
	Joins(fields ...field.RelationField) IScheduleDo
	Preload(fields ...field.RelationField) IScheduleDo
	FirstOrInit() (*entity.Schedule, error)
	FirstOrCreate() (*entity.Schedule, error)
	FindByPage(offset int, limit int) (result []*entity.Schedule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScheduleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scheduleDo) Debug() IScheduleDo {
	return s.withDO(s.DO.Debug())
}

func (s scheduleDo) WithContext(ctx context.Context) IScheduleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scheduleDo) ReadDB() IScheduleDo {
	return s.Clauses(dbresolver.Read)
}

func (s scheduleDo) WriteDB() IScheduleDo {
	return s.Clauses(dbresolver.Write)
}

func (s scheduleDo) Session(config *gorm.Session) IScheduleDo {
	return s.withDO(s.DO.Session(config))
}

func (s scheduleDo) Clauses(conds ...clause.Expression) IScheduleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scheduleDo) Returning(value interface{}, columns ...string) IScheduleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scheduleDo) Not(conds ...gen.Condition) IScheduleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scheduleDo) Or(conds ...gen.Condition) IScheduleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scheduleDo) Select(conds ...field.Expr) IScheduleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scheduleDo) Where(conds ...gen.Condition) IScheduleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scheduleDo) Order(conds ...field.Expr) IScheduleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scheduleDo) Distinct(cols ...field.Expr) IScheduleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scheduleDo) Omit(cols ...field.Expr) IScheduleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scheduleDo) Join(table schema.Tabler, on ...field.Expr) IScheduleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scheduleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScheduleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scheduleDo) RightJoin(table schema.Tabler, on ...field.Expr) IScheduleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scheduleDo) Group(cols ...field.Expr) IScheduleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scheduleDo) Having(conds ...gen.Condition) IScheduleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scheduleDo) Limit(limit int) IScheduleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scheduleDo) Offset(offset int) IScheduleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scheduleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScheduleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scheduleDo) Unscoped() IScheduleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scheduleDo) Create(values ...*entity.Schedule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scheduleDo) CreateInBatches(values []*entity.Schedule, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scheduleDo) Save(values ...*entity.Schedule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scheduleDo) First() (*entity.Schedule, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Schedule), nil
	}
}

func (s scheduleDo) Take() (*entity.Schedule, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Schedule), nil
	}
}

func (s scheduleDo) Last() (*entity.Schedule, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Schedule), nil
	}
}

func (s scheduleDo) Find() ([]*entity.Schedule, error) {
	result, err := s.DO.Find()
	return result.([]*entity.Schedule), err
}

func (s scheduleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Schedule, err error) {
	buf := make([]*entity.Schedule, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scheduleDo) FindInBatches(result *[]*entity.Schedule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scheduleDo) Attrs(attrs ...field.AssignExpr) IScheduleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scheduleDo) Assign(attrs ...field.AssignExpr) IScheduleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scheduleDo) Joins(fields ...field.RelationField) IScheduleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scheduleDo) Preload(fields ...field.RelationField) IScheduleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scheduleDo) FirstOrInit() (*entity.Schedule, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Schedule), nil
	}
}

func (s scheduleDo) FirstOrCreate() (*entity.Schedule, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Schedule), nil
	}
}

func (s scheduleDo) FindByPage(offset int, limit int) (result []*entity.Schedule, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scheduleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scheduleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scheduleDo) Delete(models ...*entity.Schedule) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scheduleDo) withDO(do gen.Dao) *scheduleDo {
	s.DO = *do.(*gen.DO)
	return s
}
