// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"kms/app/domain/entity"
)

func newUserRequested(db *gorm.DB, opts ...gen.DOOption) userRequested {
	_userRequested := userRequested{}

	_userRequested.userRequestedDo.UseDB(db, opts...)
	_userRequested.userRequestedDo.UseModel(&entity.UserRequested{})

	tableName := _userRequested.userRequestedDo.TableName()
	_userRequested.ALL = field.NewAsterisk(tableName)
	_userRequested.ID = field.NewField(tableName, "id")
	_userRequested.Username = field.NewString(tableName, "username")
	_userRequested.FullName = field.NewString(tableName, "full_name")
	_userRequested.ParentName = field.NewString(tableName, "parent_name")
	_userRequested.Password = field.NewString(tableName, "password")
	_userRequested.Email = field.NewString(tableName, "email")
	_userRequested.PhoneNumber = field.NewString(tableName, "phone_number")
	_userRequested.BirthDate = field.NewTime(tableName, "birth_date")
	_userRequested.Gender = field.NewString(tableName, "gender")
	_userRequested.Status = field.NewString(tableName, "status")
	_userRequested.ClassID = field.NewField(tableName, "class_id")
	_userRequested.CreatedAt = field.NewTime(tableName, "created_at")
	_userRequested.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userRequested.Class = userRequestedBelongsToClass{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Class", "entity.Class"),
		Schedules: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Class.Schedules", "entity.Schedule"),
		},
		User: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
			CheckInOuts struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Class.User", "entity.UserClass"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Class.User.User", "entity.User"),
			},
			CheckInOuts: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Class.User.CheckInOuts", "entity.CheckInOut"),
			},
		},
	}

	_userRequested.fillFieldMap()

	return _userRequested
}

type userRequested struct {
	userRequestedDo

	ALL         field.Asterisk
	ID          field.Field
	Username    field.String
	FullName    field.String
	ParentName  field.String
	Password    field.String
	Email       field.String
	PhoneNumber field.String
	BirthDate   field.Time
	Gender      field.String
	Status      field.String
	ClassID     field.Field
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Class       userRequestedBelongsToClass

	fieldMap map[string]field.Expr
}

func (u userRequested) Table(newTableName string) *userRequested {
	u.userRequestedDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRequested) As(alias string) *userRequested {
	u.userRequestedDo.DO = *(u.userRequestedDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRequested) updateTableName(table string) *userRequested {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewField(table, "id")
	u.Username = field.NewString(table, "username")
	u.FullName = field.NewString(table, "full_name")
	u.ParentName = field.NewString(table, "parent_name")
	u.Password = field.NewString(table, "password")
	u.Email = field.NewString(table, "email")
	u.PhoneNumber = field.NewString(table, "phone_number")
	u.BirthDate = field.NewTime(table, "birth_date")
	u.Gender = field.NewString(table, "gender")
	u.Status = field.NewString(table, "status")
	u.ClassID = field.NewField(table, "class_id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRequested) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRequested) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["full_name"] = u.FullName
	u.fieldMap["parent_name"] = u.ParentName
	u.fieldMap["password"] = u.Password
	u.fieldMap["email"] = u.Email
	u.fieldMap["phone_number"] = u.PhoneNumber
	u.fieldMap["birth_date"] = u.BirthDate
	u.fieldMap["gender"] = u.Gender
	u.fieldMap["status"] = u.Status
	u.fieldMap["class_id"] = u.ClassID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt

}

func (u userRequested) clone(db *gorm.DB) userRequested {
	u.userRequestedDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRequested) replaceDB(db *gorm.DB) userRequested {
	u.userRequestedDo.ReplaceDB(db)
	return u
}

type userRequestedBelongsToClass struct {
	db *gorm.DB

	field.RelationField

	Schedules struct {
		field.RelationField
	}
	User struct {
		field.RelationField
		User struct {
			field.RelationField
		}
		CheckInOuts struct {
			field.RelationField
		}
	}
}

func (a userRequestedBelongsToClass) Where(conds ...field.Expr) *userRequestedBelongsToClass {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userRequestedBelongsToClass) WithContext(ctx context.Context) *userRequestedBelongsToClass {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userRequestedBelongsToClass) Session(session *gorm.Session) *userRequestedBelongsToClass {
	a.db = a.db.Session(session)
	return &a
}

func (a userRequestedBelongsToClass) Model(m *entity.UserRequested) *userRequestedBelongsToClassTx {
	return &userRequestedBelongsToClassTx{a.db.Model(m).Association(a.Name())}
}

type userRequestedBelongsToClassTx struct{ tx *gorm.Association }

func (a userRequestedBelongsToClassTx) Find() (result *entity.Class, err error) {
	return result, a.tx.Find(&result)
}

func (a userRequestedBelongsToClassTx) Append(values ...*entity.Class) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userRequestedBelongsToClassTx) Replace(values ...*entity.Class) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userRequestedBelongsToClassTx) Delete(values ...*entity.Class) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userRequestedBelongsToClassTx) Clear() error {
	return a.tx.Clear()
}

func (a userRequestedBelongsToClassTx) Count() int64 {
	return a.tx.Count()
}

type userRequestedDo struct{ gen.DO }

type IUserRequestedDo interface {
	gen.SubQuery
	Debug() IUserRequestedDo
	WithContext(ctx context.Context) IUserRequestedDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRequestedDo
	WriteDB() IUserRequestedDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRequestedDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRequestedDo
	Not(conds ...gen.Condition) IUserRequestedDo
	Or(conds ...gen.Condition) IUserRequestedDo
	Select(conds ...field.Expr) IUserRequestedDo
	Where(conds ...gen.Condition) IUserRequestedDo
	Order(conds ...field.Expr) IUserRequestedDo
	Distinct(cols ...field.Expr) IUserRequestedDo
	Omit(cols ...field.Expr) IUserRequestedDo
	Join(table schema.Tabler, on ...field.Expr) IUserRequestedDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRequestedDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRequestedDo
	Group(cols ...field.Expr) IUserRequestedDo
	Having(conds ...gen.Condition) IUserRequestedDo
	Limit(limit int) IUserRequestedDo
	Offset(offset int) IUserRequestedDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRequestedDo
	Unscoped() IUserRequestedDo
	Create(values ...*entity.UserRequested) error
	CreateInBatches(values []*entity.UserRequested, batchSize int) error
	Save(values ...*entity.UserRequested) error
	First() (*entity.UserRequested, error)
	Take() (*entity.UserRequested, error)
	Last() (*entity.UserRequested, error)
	Find() ([]*entity.UserRequested, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserRequested, err error)
	FindInBatches(result *[]*entity.UserRequested, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.UserRequested) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRequestedDo
	Assign(attrs ...field.AssignExpr) IUserRequestedDo
	Joins(fields ...field.RelationField) IUserRequestedDo
	Preload(fields ...field.RelationField) IUserRequestedDo
	FirstOrInit() (*entity.UserRequested, error)
	FirstOrCreate() (*entity.UserRequested, error)
	FindByPage(offset int, limit int) (result []*entity.UserRequested, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRequestedDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRequestedDo) Debug() IUserRequestedDo {
	return u.withDO(u.DO.Debug())
}

func (u userRequestedDo) WithContext(ctx context.Context) IUserRequestedDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRequestedDo) ReadDB() IUserRequestedDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRequestedDo) WriteDB() IUserRequestedDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRequestedDo) Session(config *gorm.Session) IUserRequestedDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRequestedDo) Clauses(conds ...clause.Expression) IUserRequestedDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRequestedDo) Returning(value interface{}, columns ...string) IUserRequestedDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRequestedDo) Not(conds ...gen.Condition) IUserRequestedDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRequestedDo) Or(conds ...gen.Condition) IUserRequestedDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRequestedDo) Select(conds ...field.Expr) IUserRequestedDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRequestedDo) Where(conds ...gen.Condition) IUserRequestedDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRequestedDo) Order(conds ...field.Expr) IUserRequestedDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRequestedDo) Distinct(cols ...field.Expr) IUserRequestedDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRequestedDo) Omit(cols ...field.Expr) IUserRequestedDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRequestedDo) Join(table schema.Tabler, on ...field.Expr) IUserRequestedDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRequestedDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRequestedDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRequestedDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRequestedDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRequestedDo) Group(cols ...field.Expr) IUserRequestedDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRequestedDo) Having(conds ...gen.Condition) IUserRequestedDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRequestedDo) Limit(limit int) IUserRequestedDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRequestedDo) Offset(offset int) IUserRequestedDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRequestedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRequestedDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRequestedDo) Unscoped() IUserRequestedDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRequestedDo) Create(values ...*entity.UserRequested) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRequestedDo) CreateInBatches(values []*entity.UserRequested, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRequestedDo) Save(values ...*entity.UserRequested) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRequestedDo) First() (*entity.UserRequested, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRequested), nil
	}
}

func (u userRequestedDo) Take() (*entity.UserRequested, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRequested), nil
	}
}

func (u userRequestedDo) Last() (*entity.UserRequested, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRequested), nil
	}
}

func (u userRequestedDo) Find() ([]*entity.UserRequested, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserRequested), err
}

func (u userRequestedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserRequested, err error) {
	buf := make([]*entity.UserRequested, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRequestedDo) FindInBatches(result *[]*entity.UserRequested, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRequestedDo) Attrs(attrs ...field.AssignExpr) IUserRequestedDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRequestedDo) Assign(attrs ...field.AssignExpr) IUserRequestedDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRequestedDo) Joins(fields ...field.RelationField) IUserRequestedDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRequestedDo) Preload(fields ...field.RelationField) IUserRequestedDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRequestedDo) FirstOrInit() (*entity.UserRequested, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRequested), nil
	}
}

func (u userRequestedDo) FirstOrCreate() (*entity.UserRequested, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRequested), nil
	}
}

func (u userRequestedDo) FindByPage(offset int, limit int) (result []*entity.UserRequested, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRequestedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRequestedDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRequestedDo) Delete(models ...*entity.UserRequested) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRequestedDo) withDO(do gen.Dao) *userRequestedDo {
	u.DO = *do.(*gen.DO)
	return u
}
