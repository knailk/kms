// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"kms/app/domain/entity"
)

func newCheckInOut(db *gorm.DB, opts ...gen.DOOption) checkInOut {
	_checkInOut := checkInOut{}

	_checkInOut.checkInOutDo.UseDB(db, opts...)
	_checkInOut.checkInOutDo.UseModel(&entity.CheckInOut{})

	tableName := _checkInOut.checkInOutDo.TableName()
	_checkInOut.ALL = field.NewAsterisk(tableName)
	_checkInOut.ID = field.NewField(tableName, "id")
	_checkInOut.Username = field.NewString(tableName, "username")
	_checkInOut.Action = field.NewString(tableName, "action")
	_checkInOut.Date = field.NewInt64(tableName, "date")
	_checkInOut.CreatedAt = field.NewTime(tableName, "created_at")
	_checkInOut.UpdatedAt = field.NewTime(tableName, "updated_at")

	_checkInOut.fillFieldMap()

	return _checkInOut
}

type checkInOut struct {
	checkInOutDo

	ALL       field.Asterisk
	ID        field.Field
	Username  field.String
	Action    field.String
	Date      field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c checkInOut) Table(newTableName string) *checkInOut {
	c.checkInOutDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c checkInOut) As(alias string) *checkInOut {
	c.checkInOutDo.DO = *(c.checkInOutDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *checkInOut) updateTableName(table string) *checkInOut {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewField(table, "id")
	c.Username = field.NewString(table, "username")
	c.Action = field.NewString(table, "action")
	c.Date = field.NewInt64(table, "date")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *checkInOut) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *checkInOut) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["username"] = c.Username
	c.fieldMap["action"] = c.Action
	c.fieldMap["date"] = c.Date
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c checkInOut) clone(db *gorm.DB) checkInOut {
	c.checkInOutDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c checkInOut) replaceDB(db *gorm.DB) checkInOut {
	c.checkInOutDo.ReplaceDB(db)
	return c
}

type checkInOutDo struct{ gen.DO }

type ICheckInOutDo interface {
	gen.SubQuery
	Debug() ICheckInOutDo
	WithContext(ctx context.Context) ICheckInOutDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICheckInOutDo
	WriteDB() ICheckInOutDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICheckInOutDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICheckInOutDo
	Not(conds ...gen.Condition) ICheckInOutDo
	Or(conds ...gen.Condition) ICheckInOutDo
	Select(conds ...field.Expr) ICheckInOutDo
	Where(conds ...gen.Condition) ICheckInOutDo
	Order(conds ...field.Expr) ICheckInOutDo
	Distinct(cols ...field.Expr) ICheckInOutDo
	Omit(cols ...field.Expr) ICheckInOutDo
	Join(table schema.Tabler, on ...field.Expr) ICheckInOutDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInOutDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICheckInOutDo
	Group(cols ...field.Expr) ICheckInOutDo
	Having(conds ...gen.Condition) ICheckInOutDo
	Limit(limit int) ICheckInOutDo
	Offset(offset int) ICheckInOutDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInOutDo
	Unscoped() ICheckInOutDo
	Create(values ...*entity.CheckInOut) error
	CreateInBatches(values []*entity.CheckInOut, batchSize int) error
	Save(values ...*entity.CheckInOut) error
	First() (*entity.CheckInOut, error)
	Take() (*entity.CheckInOut, error)
	Last() (*entity.CheckInOut, error)
	Find() ([]*entity.CheckInOut, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CheckInOut, err error)
	FindInBatches(result *[]*entity.CheckInOut, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.CheckInOut) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICheckInOutDo
	Assign(attrs ...field.AssignExpr) ICheckInOutDo
	Joins(fields ...field.RelationField) ICheckInOutDo
	Preload(fields ...field.RelationField) ICheckInOutDo
	FirstOrInit() (*entity.CheckInOut, error)
	FirstOrCreate() (*entity.CheckInOut, error)
	FindByPage(offset int, limit int) (result []*entity.CheckInOut, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICheckInOutDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c checkInOutDo) Debug() ICheckInOutDo {
	return c.withDO(c.DO.Debug())
}

func (c checkInOutDo) WithContext(ctx context.Context) ICheckInOutDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c checkInOutDo) ReadDB() ICheckInOutDo {
	return c.Clauses(dbresolver.Read)
}

func (c checkInOutDo) WriteDB() ICheckInOutDo {
	return c.Clauses(dbresolver.Write)
}

func (c checkInOutDo) Session(config *gorm.Session) ICheckInOutDo {
	return c.withDO(c.DO.Session(config))
}

func (c checkInOutDo) Clauses(conds ...clause.Expression) ICheckInOutDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c checkInOutDo) Returning(value interface{}, columns ...string) ICheckInOutDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c checkInOutDo) Not(conds ...gen.Condition) ICheckInOutDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c checkInOutDo) Or(conds ...gen.Condition) ICheckInOutDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c checkInOutDo) Select(conds ...field.Expr) ICheckInOutDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c checkInOutDo) Where(conds ...gen.Condition) ICheckInOutDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c checkInOutDo) Order(conds ...field.Expr) ICheckInOutDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c checkInOutDo) Distinct(cols ...field.Expr) ICheckInOutDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c checkInOutDo) Omit(cols ...field.Expr) ICheckInOutDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c checkInOutDo) Join(table schema.Tabler, on ...field.Expr) ICheckInOutDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c checkInOutDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInOutDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c checkInOutDo) RightJoin(table schema.Tabler, on ...field.Expr) ICheckInOutDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c checkInOutDo) Group(cols ...field.Expr) ICheckInOutDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c checkInOutDo) Having(conds ...gen.Condition) ICheckInOutDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c checkInOutDo) Limit(limit int) ICheckInOutDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c checkInOutDo) Offset(offset int) ICheckInOutDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c checkInOutDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInOutDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c checkInOutDo) Unscoped() ICheckInOutDo {
	return c.withDO(c.DO.Unscoped())
}

func (c checkInOutDo) Create(values ...*entity.CheckInOut) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c checkInOutDo) CreateInBatches(values []*entity.CheckInOut, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c checkInOutDo) Save(values ...*entity.CheckInOut) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c checkInOutDo) First() (*entity.CheckInOut, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CheckInOut), nil
	}
}

func (c checkInOutDo) Take() (*entity.CheckInOut, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CheckInOut), nil
	}
}

func (c checkInOutDo) Last() (*entity.CheckInOut, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CheckInOut), nil
	}
}

func (c checkInOutDo) Find() ([]*entity.CheckInOut, error) {
	result, err := c.DO.Find()
	return result.([]*entity.CheckInOut), err
}

func (c checkInOutDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CheckInOut, err error) {
	buf := make([]*entity.CheckInOut, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c checkInOutDo) FindInBatches(result *[]*entity.CheckInOut, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c checkInOutDo) Attrs(attrs ...field.AssignExpr) ICheckInOutDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c checkInOutDo) Assign(attrs ...field.AssignExpr) ICheckInOutDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c checkInOutDo) Joins(fields ...field.RelationField) ICheckInOutDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c checkInOutDo) Preload(fields ...field.RelationField) ICheckInOutDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c checkInOutDo) FirstOrInit() (*entity.CheckInOut, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CheckInOut), nil
	}
}

func (c checkInOutDo) FirstOrCreate() (*entity.CheckInOut, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CheckInOut), nil
	}
}

func (c checkInOutDo) FindByPage(offset int, limit int) (result []*entity.CheckInOut, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c checkInOutDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c checkInOutDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c checkInOutDo) Delete(models ...*entity.CheckInOut) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *checkInOutDo) withDO(do gen.Dao) *checkInOutDo {
	c.DO = *do.(*gen.DO)
	return c
}
